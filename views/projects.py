# -*- coding: utf-8 -*-from flask import Blueprint, render_template, request, redirect, url_forfrom application import db, appfrom models.projects import Projectsfrom pypages import Paginatorfrom views.log import addlogfrom tasks import repotaskfrom views.git import Gitimport json, os, re, datetimeprojects = Blueprint('projects', __name__)@projects.route("/")@projects.route("/page/<int:pnum>",methods=['GET', 'POST'])def index(pnum=1):    pageSize=10;    page=pnum    list=Projects.query.paginate(page,pageSize,False)    pagecount=Projects.query.count()    pages=Paginator(pagecount, per_page=pageSize, current=page, range_num=10)    return render_template("projects/index.html",list=list,paginate=pages)@projects.route("/add",methods=['POST'])def add():    code=0    msg="添加项目成功"    name=request.form['name'].strip()    path=request.form['path'].strip()    giturl=request.form['giturl'].strip()    ftphost=request.form['ftphost'].strip()    ftpuser=request.form['ftpuser'].strip()    ftppass=request.form['ftppass'].strip()    ftppath=request.form['ftppath'].strip()    if len(name)<1 or len(name)>20:        code=1        msg="请输入项目名称,长度介于1-20"        return responsejson(code,msg)    if len(path)<1:        code=1        msg="请输入本地存储路径"        return responsejson(code,msg)    else:        if not giturl and not os.path.exists(path):            code=1            msg="请输入正确的本地存储路径"            return responsejson(code,msg)    hasin=Projects.query.filter(Projects.name==name).first()    if hasin:        code=1        msg="项目名称已经存在,请重新输入"        return responsejson(code,msg)    hasin=Projects.query.filter(Projects.path==path).first()    if hasin:        code=1        msg="项目路径已经存在,同一个路径只能有个项目名称"        return responsejson(code,msg)    target=Projects(name, path, giturl, ftphost, ftpuser, ftppass,ftppath)    db.session.add(target)    db.session.commit()    if target.id:        repotask.delay(target.id)        logcontent="添加项目:项目名称(%s)"%name        addlog(logcontent,2)    return responsejson(code,msg)@projects.route("/<int:id>", methods=['GET', 'POST'])def detail(id):    jsonval={}    intreg=re.compile('^\d*$')    if not intreg.match(str(id)):        return app.response_class(json.dumps(jsonval), mimetype='application/json')    info=Projects.query.filter(Projects.id==id).first()    if info :        jsonval['id']=info.id        jsonval['name']=info.name        jsonval['path']=info.path        jsonval['giturl']=info.giturl        jsonval['ftphost']=info.ftphost        jsonval['ftpuser']=info.ftpuser        jsonval['ftppass']=info.ftppass        jsonval['ftppass']=info.ftppass    return app.response_class(json.dumps(jsonval), mimetype='application/json')@projects.route("/info/<id>", methods=['GET', 'POST'])def info(id):    intreg=re.compile('^\d*$')    if not intreg.match(str(id)):        return redirect(url_for('projects.index'))    info=Projects.query.filter(Projects.id==id).first()    repo=Git(info.giturl,info.path)    status_info=repo.status()    return render_template("projects/info.html",info=info,status=status_info)@projects.route("/modify",methods=['POST'])def modify():    code=0    msg="修改项目成功"    name=request.form['name'].strip()    path=request.form['path'].strip()    giturl=request.form['giturl'].strip()    ftphost=request.form['ftphost'].strip()    ftpuser=request.form['ftpuser'].strip()    ftppass=request.form['ftppass'].strip()    ftppath=request.form['ftppath'].strip()    id=request.form['id'].strip()    if len(name)<1 or len(name)>20:        code=1        msg="请输入项目名称,长度介于1-20"        return responsejson(code,msg)    if len(path)<1:        code=1        msg="请输入本地存储路径"        return responsejson(code,msg)    else:        if not giturl and not os.path.exists(path):            code=1            msg="请输入正确的本地存储路径"            return responsejson(code,msg)    info=Projects.query.filter(Projects.id==id).first()    logcontent = ""    if info.name != name:       logcontent=logcontent+"name:%s->%s"%(info.name,name)       info.name = name    if info.path != path:       logcontent=logcontent+"path:%s->%s"%(info.path,path)       info.path = path    if info.giturl != giturl:       logcontent=logcontent+"giturl:%s->%s"%(info.giturl,giturl)       info.giturl = giturl    if info.ftphost != ftphost:       logcontent=logcontent+"ftphost:%s->%s"%(info.ftphost,ftphost)       info.ftphost = ftphost    if info.ftpuser != ftpuser:       logcontent=logcontent+"ftpuser:%s->%s"%(info.ftpuser,ftpuser)       info.ftpuser = ftpuser    if info.ftppass != ftppass:       logcontent=logcontent+"ftppass:%s->%s"%(info.ftppass,ftppass)       info.ftppass = ftppass    if info.ftppath != ftppath:       logcontent=logcontent+"ftppath:%s->%s"%(info.ftppath,ftppath)       info.ftppath = ftppath    if logcontent:        logcontent="修改项目,项目ID[%d]:%s"%(info.id, logcontent)        info.updated=datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")        db.session.commit()        addlog(logcontent,2)        repotask.delay(id)    return responsejson(code,msg)def responsejson(code,msg):    return app.response_class(json.dumps({'code':code,'msg':msg}), mimetype='application/json')